---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
# Memory

## 2023-07-26: Implemented Drag Distance Calibration System

### Changes Made
- Completely redesigned the calibration system to use a drag distance approach instead of fixed calibration points
- Removed the old calibration point system that relied on fixed screen positions
- Added new methods to `GameWorldCoordinator`:
  - `start_calibration()`: Captures the first position for calibration
  - `complete_calibration()`: Captures the second position and calculates the pixel-to-game-unit ratio
  - `cancel_calibration()`: Cancels the current calibration process
  - `get_calibration_status()`: Returns the current calibration status
  - `_calibrate()`: Internal method to calculate the pixel-to-game-unit ratio
- Updated `CoordinateDisplayWidget` with a new UI for the drag distance calibration:
  - Added "Start Calibration", "Complete Calibration", and "Cancel" buttons
  - Added calibration status display
  - Added instructions for the calibration process
  - Removed old calibration point management UI
- Improved the coordinate conversion accuracy by using the actual distance traveled in both screen pixels and game world units
- Added comprehensive error handling and validation throughout the calibration process
- Updated documentation to reflect the new calibration approach

### Impact
- Significantly improved accuracy of coordinate conversion between screen and game world
- More intuitive calibration process that accounts for the game's scrolling nature
- Better handling of different zoom levels and screen resolutions
- More reliable navigation and search operations due to improved coordinate conversion
- Simplified UI with clear instructions for the calibration process
- Enhanced user experience with immediate visual feedback during calibration
- Eliminated the need for multiple fixed calibration points

### Testing
- Verified that the calibration process correctly captures start and end positions
- Confirmed that the pixel-to-game-unit ratio is calculated accurately
- Tested calibration with different drag distances to ensure consistent results
- Verified that coordinate conversion is accurate after calibration
- Confirmed that the UI provides clear feedback throughout the calibration process
- Tested error handling by attempting calibration with invalid positions
- Verified that canceling calibration properly resets the calibration state

## 2023-07-24: Fixed OCR Button Text Update Delay

### Changes Made
- Refactored the `_toggle_ocr` method in `OverlayController` to use asynchronous operations
- Created a centralized `_update_ocr_button_state` method for managing OCR button appearance
- Added a new `_perform_ocr_toggle` method that runs asynchronously after button state updates
- Updated the `keyPressEvent` method to use the centralized button state management
- Added a `update_ocr_button_from_state` method to synchronize button state with OCR state
- Improved error handling throughout the OCR toggle process

### Impact
- OCR button text and style now update immediately when clicked
- UI remains responsive during OCR operations
- Consistent button state management across the application
- Better user experience with immediate visual feedback
- More reliable error handling and recovery
- Improved code organization with clear separation of concerns

### Testing
- Verified that the OCR button text updates immediately when clicked
- Confirmed that the UI remains responsive during OCR operations
- Tested error handling by simulating exceptions during OCR toggle
- Verified that the button state correctly reflects the OCR state
- Confirmed that keyboard shortcuts properly update the button state

## 2023-07-23: Fixed OCR Button State Inconsistency

### Changes Made
- Standardized the OCR button styling to use consistent colors (green for ON, red for OFF)
- Updated the `keyPressEvent` method to properly set the button text and style when stopping OCR
- Enhanced the `_toggle_ocr` method to ensure consistent button state management
- Updated the AutomationTab's OCR button styling to match the main OCR button
- Improved error handling to ensure the button always reflects the correct state
- Added more detailed logging to track OCR state changes

### Impact
- OCR toggle button now has only two states (ON/OFF) with consistent styling
- Button state is now properly synchronized with the actual OCR state
- Consistent behavior when toggling OCR via different methods (UI button vs. keyboard shortcuts)
- Improved user experience with clear visual feedback on OCR state
- More reliable error handling ensures the UI always reflects the actual state
- Better debugging capabilities with enhanced logging

### Testing
- Verified that the OCR button has only two states (green for ON, red for OFF)
- Confirmed that pressing Escape/Q key properly updates the OCR button style
- Tested toggling OCR via the UI button and verified consistent styling
- Verified that error handling properly updates the button state
- Confirmed that the AutomationTab's OCR button has consistent styling

## 2023-07-22: Fixed Escape/Q Key to Only Deactivate Processes

### Changes Made
- Modified the `keyPressEvent` method in the `OverlayController` class to call stop methods directly instead of toggle methods
- For OCR, now calling `_stop_ocr()` directly instead of `_toggle_ocr()`
- For template matching, now calling `overlay.stop_template_matching()` directly and updating settings
- Added a flag to track whether any processes were actually stopped
- Updated the status message to indicate when no active processes were found to stop
- Ensured all UI elements are properly updated to reflect the stopped state

### Impact
- Escape and Q keys now only deactivate processes, never activate them
- Consistent behavior with user expectations for stop keys
- More intuitive user experience with keyboard shortcuts
- Clear feedback when no active processes are found to stop
- Improved reliability of process management
- Consistent behavior across different stopping mechanisms

### Testing
- Verified that pressing Escape key only turns off template matching and never turns it on
- Confirmed that pressing Q key only turns off OCR processes and never turns them on
- Tested behavior when no processes are active to ensure appropriate feedback
- Verified that UI elements correctly reflect the stopped state
- Confirmed that the status bar provides appropriate feedback based on whether processes were stopped

## 2023-07-21: Fixed Escape/Q Key Process Toggling

### Changes Made
- Updated the `keyPressEvent` method in the `OverlayController` class to properly update button states before calling toggle methods
- Enhanced the `_toggle_pattern_matching` method to ensure button text and color are updated when toggled off
- Improved the `_toggle_ocr` method with better error handling and state management
- Added checks to ensure button states are consistent with the actual process states
- Ensured all toggle methods properly handle errors and set processes to OFF state in case of exceptions

### Impact
- Escape and Q keys now properly toggle off template matching, OCR, and automation processes
- Button states are now correctly updated when processes are stopped via keyboard shortcuts
- Consistent behavior between UI button clicks and keyboard shortcuts for stopping processes
- More robust error handling in toggle methods prevents processes from being left in an inconsistent state
- Improved user experience with reliable keyboard shortcuts for stopping processes

### Testing
- Verified that pressing Escape key properly toggles off template matching with correct button state updates
- Confirmed that pressing Q key properly toggles off OCR processes with correct button state updates
- Tested stopping automation sequences with keyboard shortcuts and verified button state updates
- Verified error handling by simulating exceptions during toggle operations
- Confirmed that the status bar correctly updates when processes are stopped via keyboard shortcuts

## 2023-07-20: Fixed Stop Key Error in OCR Process

### Changes Made
- Fixed the `keyPressEvent` method in the `OverlayController` class to call the correct methods when stopping processes with keyboard shortcuts
- Changed `_handle_ocr_toggle()` to `_toggle_ocr()` for stopping OCR processes
- Changed `_handle_pattern_toggle()` to `_toggle_pattern_matching()` for stopping template matching
- Fixed attribute name check from `self.overlay.is_active` to `self.overlay.active`
- Added a new `is_sequence_running()` method to the `AutomationTab` class to check if a sequence is currently running
- Updated the `keyPressEvent` method to safely check for the existence of the method before calling it
- Ensured proper error handling in the key event processing

### Impact
- Fixed application crash when pressing Escape or Q keys to stop OCR processes
- Fixed application crash when checking overlay status during stop key processing
- Fixed application crash when checking if a sequence is running in the automation tab
- Improved reliability of keyboard shortcuts for stopping active processes
- Enhanced user experience by ensuring stop keys work consistently
- Maintained consistent behavior across different stopping mechanisms (UI buttons vs. keyboard shortcuts)

### Testing
- Verified that pressing Escape key properly stops OCR processes without errors
- Confirmed that pressing Q key properly stops template matching without errors
- Tested stopping automation sequences with keyboard shortcuts
- Tested stopping multiple active processes simultaneously with keyboard shortcuts
- Verified that the status bar correctly updates when processes are stopped via keyboard shortcuts

## 2023-07-19: OCR Mouse Centering from Overlay Tab

### Changes Made
- Updated the `_start_ocr` method in the `OverlayController` class to center the mouse before starting OCR
- Added a call to the `game_coordinator.update_current_position_from_ocr()` method from the game world search tab
- Ensured proper error handling if the game world search tab is not available
- Added comprehensive logging to track the mouse centering process
- Improved the method documentation to clearly explain the steps taken during OCR activation

### Impact
- Consistent mouse centering regardless of which tab is used to activate OCR
- Improved OCR accuracy due to consistent mouse positioning
- More reliable coordinate extraction across all application components
- Enhanced debugging capabilities with detailed logging of OCR activation
- Better user experience with more consistent OCR results

### Testing
- Verified that the mouse is properly centered when activating OCR from the overlay tab
- Confirmed that OCR results are consistent regardless of which tab is used to start OCR
- Tested error handling when the game world search tab is not available
- Verified that logging correctly tracks the mouse centering process

## 2023-07-18: Enhanced Mouse Centering for OCR

### Changes Made
- Completely redesigned the `_center_mouse_for_measurement` method in `GameWorldCoordinator` to use multiple mouse movement approaches:
  1. win32api.SetCursorPos
  2. ctypes.windll.user32.SetCursorPos
  3. pyautogui.moveTo
  4. ctypes.windll.user32.mouse_event (as a final fallback)
- Added verification after each mouse movement attempt to ensure the mouse actually moved to the target position
- Added the `_ensure_window_active` method to activate the game window before centering the mouse
- Updated the coordinate region calculation to account for window frame offsets
- Improved the client area detection to center the mouse in the actual game area, not just the window frame
- Added comprehensive logging to track mouse movement attempts and results
- Updated the `update_current_position_from_ocr` method to ensure the window is active before trying to center the mouse

### Impact
- More reliable mouse centering before taking OCR screenshots
- Improved accuracy of coordinate extraction due to consistent mouse positioning
- Better handling of window frame offsets for more precise region selection
- Enhanced debugging capabilities with detailed logging of mouse movement attempts
- More robust error handling and recovery when mouse movement fails
- Improved user experience with more reliable OCR functionality

### Testing
- Verified that the mouse properly centers in the game window before taking OCR screenshots
- Confirmed that the window is properly activated before mouse operations
- Tested all mouse movement methods to ensure they work correctly
- Verified that the coordinate region calculation correctly accounts for window frame offsets
- Confirmed that OCR screenshots capture the correct region due to proper mouse positioning

## 2023-07-17: Persistent Game World Coordinates

### Changes Made
- Modified `GameState` class to maintain the last valid coordinates and never reset them unless explicitly told to do so
- Added `_is_valid_coordinate` method to validate coordinates before updating them
- Updated `update_coordinates` method to return a boolean indicating whether any coordinates were updated
- Added `reset_coordinates` method to explicitly reset coordinates when needed
- Updated `TextOCR` class to always emit the latest coordinates, even if OCR fails
- Enhanced `GameWorldCoordinator` to use the last valid coordinates when OCR fails
- Updated `GameWorldSearch` to use the last valid coordinates from the game state when checking for templates
- Added comprehensive logging to track coordinate updates and usage

### Impact
- Game world coordinates are now maintained consistently across the application
- OCR failures no longer cause coordinates to be lost or reset
- Template matching now uses the last valid coordinates when OCR fails
- All components now share coordinate information effectively
- Invalid coordinates are now properly validated and rejected
- Improved reliability of coordinate-dependent operations
- Enhanced debugging capabilities with detailed logging

### Testing
- Verified that coordinates are maintained when OCR fails
- Confirmed that template matching uses the last valid coordinates
- Tested coordinate validation to ensure only valid values are stored
- Verified that coordinates are shared effectively between components
- Confirmed that coordinates are never reset unless explicitly requested

## 2023-07-16: Continuous OCR Updates and Automatic Search Starting Point

### Changes Made
- Removed manual "Update Position" button from search controls
- Removed "Update Now" and "Auto Update" buttons from coordinate display
- Modified `CoordinateDisplayWidget` to always update automatically
- Updated `GameWorldSearch.search_templates()` to always use current position from OCR as starting point
- Enhanced `update_current_position_from_ocr()` with additional logging and verification
- Improved error handling in the OCR update process

### Impact
- Simplified user interface by removing unnecessary manual controls
- Ensured consistent coordinate updates across the application
- Eliminated potential for outdated coordinates by maintaining a single source of truth
- Improved reliability of search operations by always using current position
- Enhanced debugging capabilities with more detailed logging
- Reduced user confusion by removing toggles and manual update buttons

### Testing
- Verified that coordinates update automatically without manual intervention
- Confirmed that search patterns always use the current position as starting point
- Tested mouse centering reliability with enhanced logging
- Validated that all components reflect the latest coordinates from OCR

## 2023-07-15: Mouse Centering and Search Button Fixes

### Changes Made
- Enhanced the `_center_mouse_for_measurement` method in `GameWorldCoordinator` to use `win32api` for more reliable mouse movement, with `pyautogui` as a fallback
- Added a "Update Position" button to the search controls widget to explicitly trigger position updates
- Improved the `update_current_position` method to provide visual feedback with success/failure messages
- Added wait cursor during position updates to indicate processing
- Enhanced logging throughout the position update process

### Impact
- More reliable mouse centering before taking OCR screenshots
- Better user experience with explicit controls for position updates
- Improved feedback during position updates
- More robust error handling and recovery
- Better debugging capabilities with enhanced logging

### Testing
- Verified that the mouse is properly centered before taking OCR screenshots
- Confirmed that the "Update Position" button correctly updates the current position
- Tested error handling and feedback for various scenarios
- Checked that the search buttons function correctly

## 2023-07-14: Strict Coordinate Format Enforcement

### Changes Made
- Modified the coordinate extraction to strictly enforce the expected format of `K: 000 X: 000 Y: 000`
- Updated the text scoring system to heavily prioritize text matching the expected format
- Added a more specific OCR configuration to improve recognition of the expected format
- Simplified text cleaning to focus only on essential character replacements
- Added clear validation of coordinate values to ensure they are within valid ranges
- Improved logging to clearly indicate when text doesn't match the expected format

### Impact
- More reliable coordinate extraction by rejecting invalid formats
- Reduced false positives in coordinate recognition
- Clearer error messages when coordinates can't be extracted
- Improved consistency in coordinate extraction
- Better debugging capabilities with enhanced logging of rejected formats

### Testing
- Verified that only text matching the expected format is accepted
- Confirmed that invalid coordinate formats are properly rejected
- Tested that the scoring system correctly prioritizes the expected format
- Checked that coordinate values are properly validated

## 2023-07-13: OCR Text Extraction Improvements

### Changes Made
- Fixed the whitelist configuration in the OCR process by removing problematic quotation marks
- Enhanced text cleaning to handle game-specific OCR errors (e.g., "geeX" instead of "X", "MEY" instead of "Y")
- Added a new preprocessing method using image sharpening for better text definition
- Improved the scoring system to better identify valid coordinate text
- Added more robust regex patterns for coordinate extraction
- Enhanced the text selection algorithm to skip invalid results and prioritize complete coordinates
- Updated the OCR method dropdown in the GUI to include the new sharpened method
- Added more comprehensive logging of OCR results and preprocessing steps

### Impact
- More reliable coordinate extraction from the game UI
- Better handling of OCR misrecognitions specific to the game
- Improved text preprocessing for clearer character recognition
- More accurate scoring and selection of OCR results
- Reduced errors in the OCR process
- Better debugging capabilities with enhanced logging

### Testing
- Verified that coordinates are correctly extracted from the game UI
- Tested the new sharpened preprocessing method
- Confirmed that the text cleaning properly handles common OCR errors
- Checked that the scoring system correctly identifies valid coordinate text
- Verified that the OCR process no longer fails due to configuration errors

## OCR System and Game World Search Integration Fixes (2023-07-10)

### Changes Made
- Fixed the OCR system integration with the game world search functionality
- Ensured consistent screenshot capture and saving for debugging purposes
- Modified `GameWorldCoordinator.update_current_position_from_ocr()` to properly utilize the TextOCR system
- Enhanced the `GameWorldSearch._check_for_templates()` method to always save screenshots for debugging
- Improved the `CoordinateDisplayWidget._update_coordinates()` method to handle different coordinate sources
- Added additional logging for better debugging of coordinate updates
- Ensured the game world search tab properly updates when coordinates change

### Impact
- The OCR system now consistently extracts and displays coordinates from the game UI
- Debug screenshots are saved with consistent naming for easier comparison
- The game world search functionality now reliably updates coordinates during searches
- Coordinate display is more robust and handles edge cases better

### Testing
- Verified that coordinates are properly extracted and displayed in the game world search tab
- Confirmed that screenshots are saved during template searches regardless of settings
- Tested that the coordinate display widget updates correctly when coordinates change 

## 2023-07-25: Added Detailed Calibration Point Documentation

### Changes Made
- Created a comprehensive documentation file `documentation/calibration_point_explanation.md` explaining the "Add Calibration Point" feature
- Updated the TB Scout Application Report with detailed information about the coordinate calibration system
- Added calibration-related methods to the GameWorldCoordinator class description in the report
- Added the CoordinateDisplayWidget class to the Supporting Classes section in the report
- Enhanced the Game World Coordination feature description with calibration details

### Impact
- Improved understanding of the coordinate calibration system for developers and users
- Clearer documentation of how the calibration points improve coordinate conversion accuracy
- Better explanation of the relationship between screen coordinates and game world coordinates
- More comprehensive documentation of the TB Scout application's features and components
- Enhanced onboarding for new developers working on the coordinate system

### Documentation Details
- Explained the purpose and function of the calibration point system
- Detailed the technical implementation of the calibration algorithm
- Provided guidance on optimal usage of the calibration feature
- Outlined the benefits and importance of proper calibration
- Documented limitations and considerations when using the calibration system 

## 2023-07-26: Added Calibration Point Management and Persistence

### Changes Made
- Added `remove_calibration_point` method to `GameWorldCoordinator` to remove calibration points by index
- Added `clear_calibration_points` method to `GameWorldCoordinator` to clear all calibration points
- Added `get_calibration_point` method to `GameWorldCoordinator` to get a calibration point by index
- Implemented `_save_calibration_points` and `_load_calibration_points` methods for persistence
- Updated `_initialize` method to load calibration points on startup
- Enhanced `CoordinateDisplayWidget` with UI elements for managing calibration points:
  - Added a combo box to display and select calibration points
  - Added a "Remove" button to remove the selected calibration point
  - Added a "Clear All" button to clear all calibration points
  - Added `_remove_calibration_point` and `_clear_calibration_points` methods
  - Added `_update_calibration_points_list` method to update the UI
- Updated the TB Scout Application Report with the new calibration point management features

### Impact
- Calibration points now persist between application sessions, improving user experience
- Users can now manage calibration points through the UI, removing individual points or clearing all points
- Improved error handling and feedback for calibration point management
- Better visualization of calibration points in the UI
- More robust coordinate conversion with persistent calibration
- Enhanced documentation of calibration point features

### Testing
- Verified that calibration points are saved to disk and loaded on startup
- Confirmed that the UI correctly displays calibration points and enables/disables buttons
- Tested removing individual calibration points and clearing all points
- Verified that calibration is recalculated correctly after removing points
- Confirmed that the status label correctly reflects the number of calibration points
- Tested error handling for invalid calibration point indices

## 2023-07-27: Fixed Calibration Point Mouse Position Issue

### Changes Made
- Updated the `_add_calibration_point` method in `CoordinateDisplayWidget` to properly use the existing OCR solution
- Replaced the custom coordinate update with a direct call to `game_coordinator.update_current_position_from_ocr()`
- Added validation to ensure the position data is valid before adding a calibration point
- Improved error handling and logging for the calibration point addition process
- Added clear comments explaining that the center of the window is the correct screen position because the OCR method centers the mouse

### Impact
- Calibration points now correctly use the same position where the OCR reading was taken
- More accurate mapping between screen coordinates and game world coordinates
- Improved reliability of the coordinate conversion system
- Better error handling prevents adding invalid calibration points
- Enhanced logging provides better debugging information
- More consistent behavior with the rest of the application

### Testing
- Verified that the mouse is properly centered before taking OCR readings for calibration points
- Confirmed that calibration points use the correct screen position (center of window)
- Tested error handling by attempting to add calibration points with invalid coordinates
- Verified that the calibration system correctly converts between screen and game coordinates
- Confirmed that navigation and template matching are more accurate with the fixed calibration

## 2023-07-27: Implemented OCR Max Frequency Limit

### Changes Made
- Added a `max_frequency` setting to the OCR configuration with a default value of 2.0 updates per second
- Modified the `ConfigManager` class to handle the new `max_frequency` setting:
  - Added `max_frequency` to `DEFAULT_OCR_SETTINGS` with a value of 2.0
  - Updated `get_ocr_settings()` to retrieve the `max_frequency` setting
  - Updated `update_ocr_settings()` to save the `max_frequency` setting
- Enhanced the `TextOCR` class to respect the maximum frequency limit:
  - Added loading of `max_frequency` from config in the constructor
  - Modified `set_frequency()` to ensure the frequency doesn't exceed `max_frequency`
  - Added `get_max_frequency()` method to retrieve the current maximum allowed frequency
  - Updated logging to include maximum frequency information
- Updated the GUI controller to use the maximum frequency in the OCR controls:
  - Modified the frequency slider and spinbox to use the `max_frequency` from config
  - Updated the range label to show the dynamic maximum frequency
  - Ensured the slider and spinbox values don't exceed the maximum frequency

### Impact
- Prevents excessive OCR updates that could cause performance issues or crashes
- Provides a configurable limit that can be adjusted based on system capabilities
- Improves application stability by preventing too frequent OCR operations
- Enhances user experience by providing clear feedback on frequency limits
- Maintains consistent behavior across different parts of the application

### Testing
- Verified that the OCR frequency controls respect the maximum frequency
- Confirmed that the frequency slider and spinbox are properly limited
- Tested that the range label correctly shows the maximum frequency
- Verified that the TextOCR class properly enforces the maximum frequency
- Confirmed that the configuration is properly saved and loaded

## Current Task: OCR Process Performance Improvements

### Changes Made
- Optimized the OCR process in `TextOCR.extract_text()` to reduce temporary files:
  - Only process the preferred OCR method when not in auto mode
  - Standardized configuration parameters to reduce redundancy
  - Simplified the OCR method selection process
- Added rate limiting to `GameWorldCoordinator.update_current_position_from_ocr()`:
  - Implemented a minimum 500ms delay between OCR operations
  - Added early return with existing coordinates when rate limited
  - Improved logging to track rate-limited operations
- Enhanced error handling throughout the OCR process:
  - Better timeout handling to prevent the application from hanging
  - Improved fallback to existing coordinates when OCR fails
  - More robust state tracking for the OCR process

### Impact
- Significantly reduced the number of temporary PNG files created in the system temp folder
- Improved application responsiveness during OCR operations
- Prevented the application from hanging or becoming unresponsive
- Ensured coordinates are displayed in the GUI even when OCR partially fails
- Fixed issues with the Q/Escape keys not properly stopping the OCR process
- Made the OCR process more compatible with the drag calibration system

### Testing
- Verified that the application remains responsive during OCR operations
- Confirmed that fewer temporary files are created during OCR
- Tested that the Q/Escape keys properly stop the OCR process
- Verified that coordinates are displayed in the GUI even when some values are missing
- Confirmed that the OCR process works correctly with the drag calibration system

## Current Task
Fixed issues with the coordinate system and OCR process in the TB Scout application.

### Context
The TB Scout application was experiencing issues with the coordinate system and OCR process:
1. There was an error with the Qt.Checked attribute in the _toggle_auto_update method
2. The application was locking up when running the OCR process
3. Coordinates were not being displayed in the GUI

### Changes Made
1. Fixed the Qt.Checked issue in the _toggle_auto_update method by using a direct integer comparison (2 for Checked state) instead of Qt.CheckState.Checked
2. Added error handling to the _update_coordinates method to prevent lockups and provide better error feedback
3. Implemented a timeout mechanism in the _update_coordinates method to prevent the UI from freezing if the OCR process takes too long
4. Added a threading-based timeout mechanism to the update_current_position_from_ocr method in GameWorldCoordinator to prevent it from hanging indefinitely
5. Improved error handling and fallback mechanisms to use existing coordinates when OCR fails

### Benefits
1. The application is now more robust and less likely to freeze or crash
2. Users receive better feedback when OCR fails or times out
3. The coordinate system continues to function even when OCR encounters issues
4. The auto-update feature now works correctly and safely stops when errors occur

### Testing
The changes have been implemented and should resolve the issues with:
- The Qt.Checked attribute error
- The application locking up during OCR
- Coordinates not displaying in the GUI

### Next Steps
1. Monitor the application for any remaining issues with the coordinate system
2. Consider further optimizations to the OCR process to make it more reliable
3. Update documentation to reflect the changes made to the coordinate system and OCR process

### Date
Last updated: Current date 