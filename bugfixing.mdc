# Scout Project Bug Tracking

## OCR System Integration

### Issues Fixed
- **Inconsistent OCR Processing Paths**: Fixed issue where the OCR system had two separate processing paths, causing inconsistent results and making debugging difficult.

### Root Cause Analysis
The issue was caused by having two separate OCR processing paths:
1. In `TextOCR._process_region()`, it takes a screenshot of a region and processes it
2. In `GameWorldCoordinator.update_current_position_from_ocr()`, it takes a screenshot, crops it to the coordinate region, and uses `TextOCR.extract_text()` to process it

This dual approach led to inconsistent results because:
- Different regions were being captured
- Different preprocessing steps were being applied
- Debug screenshots were saved with different names, making comparison difficult
- The "old" OCR system was working correctly, but the game world search system was using a different path

### Solutions Implemented
1. **Unified OCR Processing Path**:
   - Modified `GameWorldCoordinator.update_current_position_from_ocr()` to use `TextOCR`'s region and processing method
   - Removed duplicate OCR logic in `GameWorldCoordinator`
   - Ensured all OCR processing goes through the same code path in `TextOCR._process_region()`

2. **Consistent Debug Screenshots**:
   - Updated `TextOCR._process_region()` to save the original screenshot as 'coord_region.png' for consistency with the old system
   - Ensured all debug images use consistent naming for easier comparison

### Future Prevention
- Maintain a single source of truth for OCR processing
- Ensure all OCR-related functionality uses the same processing path
- Use consistent naming for debug images
- Add more comprehensive logging for OCR processing to aid in debugging

## Increment Per Loop Feature

### Potential Issues to Watch For
- Ensure loop count is properly reset when stopping execution
- Verify that increment logic works correctly with all action types
- Check that UI correctly displays and updates increment settings
- Validate that saved sequences with increment settings load correctly
- Test edge cases like very high increment values or loop counts

### Testing Scenarios
1. Basic increment: Set repeat=1, increment=1, run for multiple loops
2. Multiplier effect: Set repeat=2, increment=1, verify repeat count doubles each loop
3. Custom increment: Set repeat=1, increment=3, verify repeat count increases by 3x each loop
4. Disabled increment: Verify actions with use_increment=False use base repeat count
5. Mixed actions: Test sequences with both increment-enabled and regular actions

### Known Issues
- None identified yet 

## Position Management

### Issues Fixed
- **Positions Reappearing After Removal**: The `positions.json` file was corrupted with multiple duplicate copies of the same JSON object. This caused positions to reappear after being removed and the application was restarted. The file has been cleaned up to contain only one valid JSON object.

- **Position Name Synchronization**: Fixed issue where position names in the UI were not properly synchronized with the internal name field in the position objects. This caused a mismatch between the UI display and the stored data, resulting in positions not being properly removed or updated.

### Potential Issues to Watch For
- Verify that position removal works correctly and positions don't reappear after application restart
- Check for any potential race conditions when multiple parts of the application try to save to the positions.json file simultaneously
- Monitor for any signs of file corruption in the positions.json file
- Ensure that position renaming properly updates both the UI and the stored data

### Root Cause Analysis
1. **Positions Reappearing Issue**: The issue was caused by the positions.json file containing multiple duplicate copies of the same JSON data. This likely happened due to a bug in the file writing process where new data was appended to the file instead of replacing it. When the application loaded the file, it would read the first valid JSON object it found, which still contained the "Down" position even after it was removed from the UI.

2. **Position Name Synchronization Issue**: When positions were created, they were given default names like "Position_1", but when they were displayed in the UI and saved to the JSON file, the UI name (like "Center") was used as the key in the dictionary, while the original name was still stored in the `name` field of the position object. When a position was renamed in the UI, only the dictionary key was updated, not the internal name field, causing a mismatch between the UI and the stored data.

### Solutions Implemented
1. **Positions Reappearing Issue**: Manually cleaned up the positions.json file to contain only one valid JSON object with the correct positions.

2. **Position Name Synchronization Issue**: 
   - Updated `_on_details_changed` to set `position.name` when renaming a position
   - Updated `_on_remove_clicked` to properly save positions after removal
   - Updated `_load_configurations` and `_load_saved_data` to ensure name synchronization when loading positions
   - Improved position creation to use unique names and avoid conflicts

### Future Prevention
- Added validation when reading/writing the positions.json file to detect and prevent corruption
- Ensured proper synchronization between UI names and internal position names
- Implemented more robust position saving after any changes 

## Search Pattern Functionality

### Issues Fixed
- **UI Integration**: Fixed issue where the search pattern button was not appearing in the automation tab UI.

- **Missing OCR Methods**: Fixed issue where the OCR-related methods were referenced in the `create_scan_controls` method but not defined in the `AutomationTab` class.

### Potential Issues to Watch For
- Verify that search patterns are correctly created and saved
- Check that the search pattern dialog properly displays all available positions
- Test that the pattern preview functionality works correctly
- Ensure that search sequences can be executed properly
- Monitor for any performance issues with large search patterns
- Test OCR functionality once it's fully implemented

### Root Cause Analysis
1. **UI Integration Issue**: The issue was caused by the `create_scan_controls` method being defined in the `AutomationTab` class but not being called during initialization. Additionally, the automation manager was not properly initialized, causing position management to be inconsistent.

2. **Missing OCR Methods Issue**: The `_toggle_ocr` and `_start_ocr_region_selection` methods were referenced in the `create_scan_controls` method but not defined in the `AutomationTab` class. Additionally, the OCR frequency controls layout was not properly structured.

### Solutions Implemented
1. **UI Integration Issue**:
   - Updated the `AutomationTab.__init__` method to initialize the `automation_manager`
   - Modified the `__init__` method to call `create_scan_controls` to add the search pattern button to the UI
   - Updated all methods to use the `automation_manager` for position management instead of directly manipulating the position list
   - Ensured proper layout structure to display both the main automation components and the scan controls

2. **Missing OCR Methods Issue**:
   - Added the missing `_toggle_ocr` and `_start_ocr_region_selection` methods to the `AutomationTab` class
   - Added the missing `on_ocr_slider_change` and `on_ocr_spinbox_change` methods to handle OCR frequency controls
   - Fixed the layout structure in `create_scan_controls` to properly add the frequency controls

### Future Prevention
- Ensure that all UI components are properly initialized and displayed
- Use a consistent approach to position management through the automation manager
- Add more comprehensive logging for UI initialization and component creation
- Implement proper method stubs for all referenced methods, even if the functionality is not yet implemented
- Use proper code organization to ensure that all required methods are defined before they are referenced 

## Game World Coordinator OCR Integration

### Issues Fixed
- **Missing extract_text Method**: Fixed issue where the `GameWorldCoordinator` class was trying to call `extract_text()` on the `TextOCR` object, but this method didn't exist in the `TextOCR` class.

- **OCR Coordinate Extraction Issues**: Fixed issues with OCR coordinate extraction where the coordinates were not being properly recognized from the game UI.

### Potential Issues to Watch For
- Verify that OCR text extraction works correctly with different image formats and sizes
- Check that coordinate parsing from extracted text is accurate
- Test OCR functionality with different game resolutions and UI scales
- Monitor for any performance issues with frequent OCR processing
- Ensure proper error handling for OCR failures

### Root Cause Analysis
1. **Missing extract_text Method Issue**: The issue was caused by a mismatch between the `GameWorldCoordinator` implementation and the `TextOCR` class interface. The `GameWorldCoordinator` expected the `TextOCR` class to have an `extract_text()` method that would take an image and return the extracted text, but this method was not implemented in the `TextOCR` class.

2. **OCR Coordinate Extraction Issues**: The issues were caused by:
   - Incorrect coordinate region positioning (was targeting bottom right corner instead of bottom center)
   - Insufficient OCR preprocessing for the specific coordinate text format
   - Limited coordinate parsing logic that didn't handle various OCR misrecognitions
   - Redundant OCR processing in `GameWorldCoordinator` that duplicated functionality from `TextOCR`

### Solutions Implemented
1. **Missing extract_text Method Issue**:
   - Added a new `extract_text(image: np.ndarray) -> str` method to the `TextOCR` class
   - Implemented the method to handle image preprocessing (grayscale conversion, contrast enhancement, noise reduction)
   - Added proper error handling and logging
   - Included debug visualization support for the extracted text

2. **OCR Coordinate Extraction Issues**:
   - Updated the default coordinate region to target the bottom center of the screen where coordinates are typically displayed
   - Enhanced the OCR preprocessing in `TextOCR.extract_text()` to try multiple approaches:
     - Standard adaptive thresholding
     - Inverse thresholding (better for light text on dark backgrounds)
     - Otsu's thresholding (automatically determines optimal threshold)
   - Added multiple OCR attempts with different PSM modes and character whitelists
   - Implemented a selection algorithm to choose the best OCR result based on coordinate patterns
   - Enhanced the coordinate parsing logic in `_parse_coordinates()` to handle:
     - Standard coordinate formats (K:123 X:456 Y:789)
     - Unlabeled number sequences (assuming K, X, Y order)
     - Common OCR misrecognitions (O/0, l/1, etc.)
   - Modified `GameWorldCoordinator.update_current_position_from_ocr()` to use the `TextOCR.extract_text()` method instead of duplicating OCR processing

### Future Prevention
- Ensure clear interface definitions between classes
- Document expected methods and their signatures for classes that will be used by other components
- Implement comprehensive unit tests to verify class interfaces
- Use interface classes or abstract base classes to enforce method implementations
- Add more robust error handling for method calls that might fail
- Implement more sophisticated OCR preprocessing and text extraction techniques
- Add more comprehensive logging for OCR processing to aid in debugging 

## Missing cv2 Import in GameWorldSearch

### Issues Fixed
- Fixed error in `_check_for_templates` method in `GameWorldSearch` class: `NameError: name 'cv2' is not defined`
- The method was trying to use cv2.imwrite() to save screenshots, but the cv2 module wasn't imported

### Root Cause Analysis
- The `cv2` module was being used in the `_check_for_templates` method to save screenshots, but it wasn't imported at the top of the file
- This caused a runtime error when the screenshot saving functionality was triggered

### Solutions Implemented
- Added `import cv2` to the imports section at the top of the `game_world_search.py` file
- This ensures the OpenCV functionality is available when needed for saving screenshots

### Future Prevention
- Always ensure all required modules are properly imported before using them
- Consider adding automated tests that verify all imports are properly defined
- When implementing new functionality that uses external libraries, double-check that the imports are included 

## Coordinate Display Issues

### Issues Fixed
- **Coordinate Order**: Fixed the order of coordinates in the `CoordinateDisplayWidget` class to display in the order K, X, Y instead of X, Y, K.
- **Coordinate Formatting**: Updated coordinate display to properly format coordinates with a maximum of 3 digits and consistent formatting.
- **Coordinate Updates in Game World Search Tab**: Fixed issue where coordinates were not being updated in the game world search tab by connecting to the `coordinates_updated` signal from the `TextOCR` class.
- **Coordinate Validation**: Added validation to ensure coordinates are within valid ranges (0-999 for X/Y, 1-999 for K).
- **OCR Coordinate Extraction**: Improved OCR coordinate extraction to better recognize and parse coordinates from the game UI.

### Potential Issues to Watch For
- Verify that coordinates are properly updated in both the overlay tab and game world search tab
- Check that coordinates are displayed in the correct order (K, X, Y)
- Ensure that coordinates are properly formatted with a maximum of 3 digits
- Monitor for any issues with coordinate updates based on mouse position
- Test OCR coordinate extraction with different game UI states and resolutions

### Root Cause Analysis
1. **Coordinate Order Issue**: The `CoordinateDisplayWidget` class was displaying coordinates in the order X, Y, K instead of K, X, Y.
2. **Coordinate Formatting Issue**: The string representation methods in `GameCoordinates` and `GameWorldPosition` classes were not formatting coordinates with a maximum of 3 digits.
3. **Coordinate Updates Issue**: The `GameWorldSearchTab` class was not connecting to the `coordinates_updated` signal from the `TextOCR` class.
4. **Coordinate Validation Issue**: The `_parse_coordinates` method in the `GameWorldCoordinator` class was not validating coordinates to ensure they are within valid ranges.
5. **OCR Coordinate Extraction Issue**: The OCR processing in both `TextOCR` and `GameWorldCoordinator` classes was not optimized for extracting coordinates from the game UI, resulting in poor recognition and parsing.

### Solutions Implemented
1. **Coordinate Order Fix**: Updated the `_create_ui` method in the `CoordinateDisplayWidget` class to display coordinates in the order K, X, Y.
2. **Coordinate Formatting Fix**: 
   - Updated the `__str__` method in the `GameCoordinates` class to format coordinates with a maximum of 3 digits.
   - Updated the `__str__` method in the `GameWorldPosition` class to format coordinates with a maximum of 3 digits.
   - Updated the `_update_coordinates_display` method in the `OverlayController` class to format coordinates properly.
   - Updated the `_update_coordinates` method in the `CoordinateDisplayWidget` class to format coordinates properly.
3. **Coordinate Updates Fix**: Added the `_on_coordinates_updated` method to the `GameWorldSearchTab` class and connected it to the `coordinates_updated` signal from the `TextOCR` class.
4. **Coordinate Validation Fix**: Updated the `_parse_coordinates` method in the `GameWorldCoordinator` class to validate coordinates and ensure they are within valid ranges.
5. **OCR Coordinate Extraction Fix**:
   - Enhanced the `extract_text` method in the `TextOCR` class to try multiple preprocessing approaches and OCR configurations.
   - Implemented a selection algorithm to choose the best OCR result based on coordinate patterns.
   - Enhanced the coordinate parsing logic in `_parse_coordinates()` to handle various coordinate formats and OCR misrecognitions.
   - Updated the default coordinate region in `GameWorldCoordinator` to better target the area where coordinates are displayed.
   - Modified `GameWorldCoordinator.update_current_position_from_ocr()` to use the `TextOCR.extract_text()` method instead of duplicating OCR processing.

### Future Prevention
- Ensure consistent coordinate formatting across all classes that display coordinates
- Use a centralized coordinate formatting utility function to ensure consistency
- Add comprehensive validation for all coordinate values
- Ensure all UI components that display coordinates are properly connected to coordinate update signals
- Implement more sophisticated OCR preprocessing and text extraction techniques specifically optimized for coordinate recognition
- Add more comprehensive logging for OCR processing to aid in debugging
- Consider adding a calibration process for OCR coordinate region to improve accuracy across different game UI states and resolutions 

## Coordinate Measurement Consistency

### Issues Fixed
- **Inconsistent Coordinate Measurements**: Fixed issue where coordinate measurements from OCR were inconsistent due to mouse position affecting the visible part of the game world.

### Potential Issues to Watch For
- Verify that coordinate measurements are consistent when taken multiple times at the same location
- Check that mouse centering works correctly across different window sizes and positions
- Monitor for any performance issues with frequent mouse movements
- Ensure the mouse centering doesn't interfere with other mouse operations

### Root Cause Analysis
The issue was caused by the mouse position affecting what part of the game world is visible, which in turn affects the coordinates displayed in the game UI. Without centering the mouse before taking OCR measurements, the coordinates could be inconsistent even when the game view hasn't changed significantly.

### Solutions Implemented
- Added a new `_center_mouse_for_measurement` method to the `GameWorldCoordinator` class that centers the mouse in the game window before taking OCR measurements
- Updated the `update_current_position_from_ocr` method to call this new method before capturing the screenshot
- Enhanced the `_on_coordinates_updated` method in the `GameWorldSearchTab` class to display the current coordinates in the status label

### Future Prevention
- Consider adding a visual indicator when coordinates are being measured to make it clear to the user
- Add more comprehensive logging for coordinate measurements to help with debugging
- Implement a coordinate history to track changes over time
- Consider adding a calibration process to improve coordinate accuracy

## OCR Screenshot Region Issue

### Issues Fixed
- **Inconsistent OCR Screenshot Regions**: Fixed issue where OCR debug screenshots were being taken from different regions, causing confusion and making debugging difficult.

### Root Cause Analysis
The issue was caused by two separate screenshot capture paths in the code:
1. In `GameWorldCoordinator.update_current_position_from_ocr()`, the code correctly:
   - Takes a full screenshot of the game window
   - Crops it to the coordinate region
   - Saves the cropped image as `coord_region.png`
   - Passes the cropped image to `text_ocr.extract_text()`

2. In `TextOCR._process_region()`, the code was:
   - Taking a separate screenshot of the region specified in `self.region`
   - This region was in screen coordinates, not relative to the already cropped image
   - It then saved this as `OCR Region.png`

This resulted in inconsistent debug screenshots, where `coord_region.png` showed the correct area but other debug screenshots like `OCR Extract.png` were taken from a different area.

### Solutions Implemented
1. **Refactored TextOCR.extract_text()**: 
   - Enhanced the method to apply multiple preprocessing techniques
   - Added saving of the original image and all preprocessed versions
   - Implemented a scoring system to select the best OCR result
   - Improved error handling and logging

2. **Refactored TextOCR._process_region()**:
   - Removed duplicate OCR logic
   - Made it use the enhanced `extract_text()` method
   - Ensured consistent debug image saving
   - Added more descriptive debug image names

3. **Enhanced TextOCR._extract_coordinates()**:
   - Improved text cleaning to handle more OCR artifacts
   - Added support for multiple coordinate formats
   - Enhanced logging for better debugging
   - Improved error handling

4. **Updated GameWorldCoordinator.update_current_position_from_ocr()**:
   - Added better documentation
   - Ensured it properly uses the TextOCR.extract_text method

### Future Prevention
- Centralized OCR processing in the `extract_text()` method to avoid duplication
- Added comprehensive logging throughout the OCR process
- Implemented consistent debug image naming and saving
- Added detailed documentation to clarify the intended flow of data through the OCR system

## OCR Coordinate Extraction Issues

### Issues Fixed
- **OCR Preprocessing Method Selection**: Attempted to fix issue where the OCR was using a suboptimal preprocessing method (adaptive thresholding) by using Otsu's thresholding, but reverted changes as they made the issue worse.
- **Inconsistent Debug Screenshots**: Attempted to fix issue where `coord_region.png` was showing incorrect output by checking for dimension swapping and adding preprocessing, but reverted changes as they caused issues.
- **OCR Configuration**: Attempted to update OCR configuration to use Otsu's thresholding for all PSM modes and character whitelist configurations, but reverted changes as they caused issues.

### Potential Issues to Watch For
- Verify that OCR text extraction works correctly with different image formats and sizes
- Check that coordinate parsing from extracted text is accurate
- Test OCR functionality with different game resolutions and UI scales
- Monitor for any performance issues with frequent OCR processing
- Ensure proper error handling for OCR failures
- Check that the current preprocessing approach works well in different lighting conditions and UI themes

### Root Cause Analysis
1. **OCR Preprocessing Method Issue**: The OCR was using adaptive thresholding (thresh1) as the primary preprocessing method. We attempted to use Otsu's thresholding (thresh3) instead, but this caused issues with coordinate extraction.

2. **Inconsistent Debug Screenshots Issue**: The `coord_region.png` file was showing incorrect output. We attempted to fix this by:
   - Checking for dimension swapping when cropping the image (height and width reversed)
   - Adding preprocessing to enhance the text visibility
   - Ensuring consistent handling of image orientation between different parts of the code
   However, these changes caused issues with coordinate extraction, so we reverted them.

### Solutions Implemented
1. **OCR Preprocessing Method Fix**:
   - Attempted to update `TextOCR.extract_text()` to prioritize Otsu's thresholding (thresh3) for OCR processing
   - Attempted to modify the OCR result list to try thresh3 first before other preprocessing methods
   - Attempted to update all PSM modes and character whitelist configurations to use thresh3 instead of thresh1
   - Attempted to change the debug window visualization to use thresh3 instead of thresh1
   - Reverted all these changes as they caused issues with coordinate extraction

2. **Inconsistent Debug Screenshots Fix**:
   - Attempted to add dimension checking and correction in `GameWorldCoordinator.update_current_position_from_ocr()`
   - Attempted to implement automatic transposition of the image if dimensions appear to be swapped
   - Attempted to add additional preprocessing for `coord_region.png` using Otsu's thresholding
   - Attempted to save both the original cropped region and a preprocessed version for better debugging
   - Attempted to update `TextOCR._process_region()` to use ocr_thresh3.png for the debug window instead of ocr_thresh1.png
   - Reverted all these changes as they caused issues with coordinate extraction

### Future Prevention
- Implement comprehensive unit tests for OCR preprocessing to verify which method works best
- Add more robust dimension checking and orientation correction throughout the OCR pipeline
- Consider adding a calibration process to automatically determine the best preprocessing method based on the current game UI
- Implement more sophisticated image quality metrics to select the best preprocessing method dynamically
- Add more comprehensive logging for OCR processing to aid in debugging
- Consider adding a visual indicator in the UI to show which preprocessing method is being used 