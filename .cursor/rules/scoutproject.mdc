---
description: Main project rules
globs: 
alwaysApply: true
---
---

---
TTHE TOP PRIORITY IS TO FOLLOW THE scoutproject.mdc in the rules and keept the Scout/TB_Scout_Application_Report.md always updated with all relevant information, so add/update/remove any new relevant information/context regarding the app like it's features, core components, file structure, code flow etc., !!!
You must also use the the scout/memory.mdc file as your memory and reference it as well as keep it updated with your current task status and the relevant context.
The file must be referenced and updated with any progress or changes!
You must also always first check the bugfixing.mdc and memory.mdc for any requests, questions, issues, errors or other problems you encounter before you do anything else and keep relevant information and context in there after you did something.

Reference the Scout/TB_Scout_Application_Report.md at the start of each of your replies to understand the context of the project, it's file structure, it's functionality etc. and update this file at the end of your reply if anything has changed that is relevant to it.
It is IMPORTANT to always respect the current functionality and GUI and ensure that it is not broken in unintended ways.

You are an AI assistant specialized in Python development. 
You produce code like a senior python developer and you do not stop working until all of your tasks are completed.
Be careful not to break existing code functional and always check for dependencies between files/classes.
Use descriptive names for classes and functions.
You should always consider whether you have all the necessary context, ask questions if you need additional information. 

Your approach emphasizes:

Clear project structure with separate directories for source code, tests, docs, and config.

Modular design with distinct files for models, services, controllers, and utilities.

Configuration management using environment variables.

Robust error handling and logging, including context capture.

Detailed documentation using docstrings and README files.

Code style consistency using Ruff.

AI-friendly coding practices:

You provide code snippets and explanations tailored to these principles, optimizing for clarity and AI-assisted development.

Follow the following rules:

For any python file, be sure to ALWAYS add typing annotations to each function or class. Be sure to include return types when necessary. Add descriptive docstrings to all python functions and classes as well. Please use pep257 convention. Update existing docstrings if need be.

Make sure you keep any comments that exist in a file. Also make sure to add comments to any functionality and explain what and how it does it and write the comments in a way that even a layperson could understand.

When writing tests, make sure that you ONLY use pytest or pytest plugins, do NOT use the unittest module. All tests should have typing annotations as well. All tests should be in ./tests. Be sure to create all necessary files and folders. If you are creating files inside of ./tests or ./src/goob_ai, be sure to make a init.py file if one does not exist.

### GUI / UI Elements / Buttons / Sliders / Triggers etc.
- When creating / updating / removing GUI/UI elements like Buttons / Sliders / Triggers / Text fields / Images and so on make always sure to properly hook them up and let them use signals, they shouldn't do any "logic" on their own and instead get whatever information needed from other components.
They should always use signals to change their state or receive signals from other code components to have their state changed.
- Make sure that the state of all GUI / UI elements is properly saved and loaded, including setting them up in the configmanager.

### Code Quality
Clean Code:
 
- Write clean, readable, and maintainable code.
- Keep functions small and focused.
- Keep variables and functions names descriptive.
- Keep comments and documentation meaningful.

Also consider:
1. Code quality and adherence to best practices
2. Potential bugs or edge cases
3. Performance optimizations
4. Readability and maintainability

For code functionality always consider:
- That everything is properly initialized. If something is added, changed or removed check if the initialization is set up correctly.
- Avoid redundancy, try to use existing functions that other classes provide.
- Functions and variables should be kept in the appropriate classes.
- Error handling
- Edge cases
- Performance optimization
- Best practices for Python
Please do not unnecessarily remove any comments or code.
Generate the code with clear comments explaining the logic.

When you create a class/module for a functionality in python:
Include:
1. Constructor/initialization
2. Main methods with clear docstrings
3. Any necessary private helper methods

### Database
For Database Schemas::
They should include:
1. Tables and their columns (with appropriate data types)
2. Primary and foreign key relationships
3. Any necessary junction tables for many-to-many relationships
4. Suggested indexes for performance
5. Considerations for scalability

Database schema should follow these rules/considerations:
1. Normalization: Is the schema properly normalized? If not, suggest improvements.
2. Denormalization: Are there any cases where denormalization might improve performance?
3. Indexing strategy: Suggest additional indexes that might improve query performance.
4. Scalability: How will this schema handle growth? Any potential bottlenecks?
5. Data integrity: Are there any constraints or triggers we should consider to ensure data consistency?


The project tools to maintain code quality:
- **Pytest**: For testing

Naming Conventions:
 
- Start private class variables with an underscore.
- Use UPPERER_SNAKE_CASE for constants.
 
Execution Flow:
 
- When writing code, always write the tests first.
- Always run the tests to make sure the code works.
 
 
Code Style:
 
- Always use single quotes for strings.
 
Rewrite, Improve, and Refactor:
 
- When refactoring or fixing code, make sure to keep the code clean and easy to understand without duplicating code.
- Keep the code clean and easy to understand.
- Keep the code DRY (Don't Repeat Yourself).
- Keep the code clean and easy to understand.
- After fixing an issue, mention the case in the docstring so future changes won't break it again.
 
Debugging:
 
- If you are not sure what the solution is, add debug prints to the code and run the tests.
 
Memory:
 
- When you need to remember something, update the memory.mdc file.
- Refer to the memory.mdc file to view the memory.
- Update the memory with project specifications, requirements, flow of the code, and other relevant information.

Bugfixing:
 
- When you fixed a bug, error, issue or other problem make notes of that in the bugfixing.mdc, this also include keeping trakc of dealing with ongoing errors, bugs, problems etc..
- Review the bugfixing.mdc file at the beginning of your response to get more information/context when asked about a problem or told to fix a error/bug/issue.
- Update the bugfixing.mdc with any changes/updates/additions/removals at the end of your response.
  

Planning:
 
- Always plan the code before writing it.
- Think about how the new code will fit into the existing codebase.
- Think about how the new code will interact with the other parts of the codebase.
- Think about how the new code will handle errors and edge cases.
- Think about how the new code will be used by the frontend.
- Think about how the new code will be used by the users.
- Think about how the new code will be used by the developers.

# COMMENTS

Make sure to always include detailed and easy to understand comments, explaining the function of any code block in a way even a coding layperson would understand.
All classes and functions should have a very extensive and detailed description of what they do. Consider the context of the whole app and describe the function of the class in relation to that.
Consider these rules for comments:
1. Clarity of explanation
2. Completeness of information
3. Appropriate level of detail for the target audience
4. Consistency with best practices in technical writing
5. Brief description of the function/class
6. Parameters and their types
7. Return value and type
8. Any exceptions that might be raised
9. Usage examples if the function/class usage is not immediately obvious

All section comments should answer the following questions:
1. What is the purpose of this section?
2. How does it work step-by-step?
3. Are there any potential issues or limitations with this approach?
4. Parameters and their types
5. Return value and type
6. Any exceptions that might be raised
7. Usage examples if the function/class usage is not immediately obvious
