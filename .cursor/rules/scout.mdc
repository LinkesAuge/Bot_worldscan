---
description: General rules for the project
globs: *.py
---
---
description: General rules for the project
globs: *.py
---
---
description: General guidance and coding for the project
globs: *.py
---

Make sure to usethe memory.mdc file as your memory.
The file must be referenced and updated with any progress or changes!

Scout Projekt for Total Battle game

# PROJECT OVERVIEW
# TB Scout

A Python application for automating interactions with the Total Battle browser game (which can be run in the browser or a dedicated windows app) through computer vision and automation.

We develop an App for a browser game called "Total Battle" that can run in browsers like Chrome, Firefox, Internet Explorer etc. but can also run in a dedicated windows app (window name is "Total Battle). 
The app is a tool to extract information from the game world (the user has a top down view of a map with cities, monsters, armies, points of interests etc.) and to control certain actions (like move the camera, mouse cursor, click on objects etc.).
To achieve this we take screenshots of the current game state and analyse them with pattern matching and ocr / optical character recognition.

# TECH AND LIBRARIES STACK
- Python as coding language
- PyQt6 
- pynput, pydirectinput and pyautogui
- WindwsAPI for window management
- cv2
- pytesseract (Tesseract 5.5)on
- numpy for maths and data handling
- uv for project dependency management and virtual environments

# ERROR FIXING PROCESS
Go through the problem step by step, utilize extensive logging and debugging techniques and think about different approaches to solve a bug

# GITHUB PUSH PROCESS
1. stage changes:
git add .
2. Commit changes:
git commit -m "Our commit message following our GitHub Guidelines"
3. Push changes:
git push origin main 

# IMPORTANT
You produce code like a senior python developer and you do not stop working until all of your tasks are completed.
Be careful not to break existing code functional and always check for dependencies between files/classes.
Use descriptive names for classes and functions.
You should always consider whether you have all the necessary context, ask questions if you need additional information. 

# OTHER CONTEXT
We need to keep our project toml file "pyproject" updated when we add/remove/change dependencies

Project Summary:
 
 
Documentation and Comments:
 
- Write meaningful comments and documentation only when necessary.
- Don't use personal pronouns like "I" or "we" in comments or documentation.
- Write documentation for all functions, classes, and modules.
- Write meaningful docstrings that describe the intention and behavior of the function, class, or module, and explain assumptions.
- Keep docstrings up to date and to the point.
 
Error Handling:
 
- Don't wrap code in try except blocks unless you're catching a specific exception.
 
Printing and Logging:
 
- Use a logger for all logging needs.


## Features

- Window detection and tracking for both standalone and browser versions
- Screenshot capture and analysis
- Pattern matching for game elements
- OCR text extraction from game elements
- Mouse and keyboard automation
- Debug visualization and logging
- Sound notifications

## Requirements

- Python 3.9 or higher
- Tesseract OCR 5.5
- Windows 10/11



### Code Quality

The project uses several tools to maintain code quality:

- **Ruff**: For linting and code formatting
- **MyPy**: For static type checking
- **Pytest**: For testing
- **Coverage.py**: For code coverage tracking
- **Pre-commit**: For automated checks before commits

Run linting:
```bash
ruff check .
```

Run type checking:
```bash
mypy scout
```

### Continuous Integration

The project uses GitHub Actions for CI/CD:

- Runs tests on Windows with Python 3.9, 3.10, and 3.11
- Performs linting and type checking
- Generates test coverage reports
- Builds executable

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run tests and ensure all checks pass
5. Submit a pull request

### Commit Message Format

Use the following prefixes for commit messages:

- `fix:` for bug fixes
- `feat:` for new features
- `perf:` for performance improvements
- `ui:` for GUI/UI changes
- `style:` for formatting changes
- `log:` for logs/debugging related changes
- `docs:` for documentation changes
- `refactor:` for code refactoring
- `test:` for adding missing tests
- `other:` for any other changes

## License

MIT License - see LICENSE file for details

 
Naming Conventions:
 
- Start private class variables with an underscore.
- Use UPPERER_SNAKE_CASE for constants.
- Always write MongoDB and not Mongo.
 
Execution Flow:
 
- When writing code, always write the tests first.
- Always run the tests to make sure the code works.
 
Clean Code:
 
- Write clean, readable, and maintainable code.
- Keep functions small and focused.
- Keep variables and functions names descriptive.
- Keep comments and documentation meaningful.
 
Development Flow:
 
- Always write the tests first.
- Always run the tests to make sure the code works.
- When given a task, write code and run it until it works well.
 
Code Style:
 
- Always use single quotes for strings.
 
Rewrite, Improve, and Refactor:
 
- When refactoring or fixing code, make sure to keep the code clean and easy to understand without duplicating code.
- Keep the code clean and easy to understand.
- Keep the code DRY (Don't Repeat Yourself).
- Keep the code clean and easy to understand.
- After fixing an issue, mention the case in the docstring so future changes won't break it again.
 
Tests:
 
- Always write the tests first.
- Always run the tests to make sure the code works.
- Always keep the tests clean and up to date.
- Always run the tests in the venv.
 
Debugging:
 
- If you are not sure what the solution is, add debug prints to the code and run the tests.
- After fixing an issue remove the debug prints.
 
Async:
 
- Always use async unless the function is a simple function that doesn't need to be async.
 
Memory:
 
- When you need to remember something, update the .cursormemory.md file.
- Refer to the .cursormemory.md file to view the memory.
- Update the memory with project specifications, requirements, flow of the code, and other relevant information.
- Add instructions for development like how to add new GraphQL mutations and queries to the memory.
 
Planning:
 
- Always plan the code before writing it.
- Think about how the new code will fit into the existing codebase.
- Think about how the new code will interact with the other parts of the codebase.
- Think about how the new code will handle errors and edge cases.
- Think about how the new code will be used by the frontend.
- Think about how the new code will be used by the users.
- Think about how the new code will be used by the developers.

# COMMENTS

Make sure to always include detailed and easy to understand comments, explaining the function of any code block in a way even a coding layperson would understand.
All classes and functions should have a very extensive and detailed description of what they do. Consider the context of the whole app and describe the function of the class in relation to that.
Consider these rules for comments:
1. Clarity of explanation
2. Completeness of information
3. Appropriate level of detail for the target audience
4. Consistency with best practices in technical writing
5. Brief description of the function/class
6. Parameters and their types
7. Return value and type
8. Any exceptions that might be raised
9. Usage examples if the function/class usage is not immediately obvious
