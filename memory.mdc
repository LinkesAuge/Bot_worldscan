---
description: The memory file to keep all relevant information, status and whatever else is needed for the code in the project plan
globs: 
---
---
description: your memory file
globs: *.py
---
please remember to do not more than 24 tool calls in one reply. Ask for feedback inbetween.
You must also reference the bugfixing.mdc for any issues, errors or other problems you encounter and keep relevant information and context in there.
description: our memory file
globs: *.py
---
---
description: 
globs: 
---
---
description: 
globs: 
---
# Project Memory - Scout 1.0.0

## Current Status
- **Status**: Release Ready
- **Version**: 1.0.0
- **Last Updated**: Today

## Architecture Overview

Scout is a desktop application designed for automating interactions with the Total Battle game. It uses computer vision techniques to analyze the game screen, detect game elements, and perform automated actions.

### Key Components

1. **Core Services**
   - **Window Service**: Detects and captures the game window
   - **Detection Service**: Analyzes images to detect game elements
   - **Automation Service**: Executes sequences of automated tasks
   - **Game Service**: Maintains and updates game state information

2. **UI Framework**
   - **Main Window**: Central UI container with tabbed interface
   - **Tabs**: Specialized views for different functionality
     - Detection Tab: For identifying game elements
     - Automation Tab: For creating and running automation sequences
     - Game State Tab: For visualizing and tracking game state
     - Settings Tab: For configuring application preferences

3. **Cross-cutting Features**
   - **Internationalization**: Multi-language support (English/German)
   - **Theme System**: Light/Dark/System theme options
   - **Event System**: Message-based communication between components
   - **Error Handling**: Comprehensive error recovery mechanisms
   - **Update System**: Automated application updates

## Project Structure

### Core Directories

- **scout/core/**: Core functionality and services
  - **automation/**: Task scheduling and execution
  - **detection/**: Image analysis algorithms
  - **design/**: Design pattern implementations (Singleton, SingletonProtocol)
  - **events/**: Event system with EventBus, Event types
  - **game/**: Game state tracking
  - **interfaces/**: Service interfaces
  - **services/**: Service implementations
  - **utils/**: Utility functions
  - **window/**: Window management
  - **updater/**: Update checking and installation

- **scout/ui/**: User interface components
  - **controllers/**: UI controllers
  - **dialogs/**: Application dialogs
    - **update_dialog.py**: Handles update discovery and installation
    - **keyboard_shortcuts_dialog.py**: Displays and edits keyboard shortcuts
  - **models/**: UI data models
    - **settings_model.py**: Manages application settings
  - **styles/**: UI styling resources
  - **utils/**: UI utilities
    - **language_manager.py**: Manages application internationalization
    - **file_utils.py**: Handles file operations with platform compatibility
    - **layout_helper.py**: Adjusts layouts for different languages
    - **shortcuts.py**: Manages keyboard shortcuts
  - **views/**: Main UI views
    - **detection_tab.py**: Detection functionality
    - **automation_tab.py**: Automation sequence management
    - **game_state_tab.py**: Game state visualization
    - **settings_tab.py**: Application settings
    - **automation_action_editor.py**: Configures automation actions
    - **automation_position_list.py**: Manages saved positions
  - **widgets/**: Reusable UI components
    - **template_list_widget.py**: Manages detection templates
    - **detection_result_widget.py**: Visualizes detection results
    - **detection_history_widget.py**: Shows detection history
    - **detection_heatmap_widget.py**: Creates heatmaps from detections
    - **game_state_visualization_widget.py**: Visualizes game state data
    - **control_panel_widget.py**: Context-sensitive control panel

- **scout/translations/**: Language resources
  - **scout_en.ts/qm**: English translations
  - **scout_de.ts/qm**: German translations
  - **translator_app.py**: Tool for testing translations
  - **check_translations.py**: Verifies translation coverage
  - **config.py**: Translation configuration

- **scout/tests/**: Test suites
  - **core/**: Core module tests
  - **ui/**: UI component tests
  - **integration/**: Integration tests
  - **cross_platform/**: Platform-specific tests
  - **performance/**: Performance benchmarks
  - **translations/**: Translation system tests

- **docs/**: Documentation
  - **api/**: API documentation
  - **developer/**: Developer guides
  - **user_guide/**: End-user documentation
    - **README.md**: Documentation entry point
    - **introduction.md**: Application introduction
    - **installation.md**: Installation instructions
    - **language_settings.md**: Language configuration guide
    - **updates.md**: Update system documentation
    - **whats_new.md**: New features information
  - **RELEASE_NOTES.md**: Detailed release information
  - **images/**: Screenshots and diagrams

- **tools/**: Development and build tools
  - **build_executable.py**: PyInstaller configuration
  - **build_macos.py**: macOS build script
  - **build_linux.py**: Linux build script
  - **prepare_release.py**: Release preparation automation
  - **run_release_verification.py**: Release verification tests
  - **mock_update_server.py**: Test server for update system

### Auxiliary Directories

- **installer/**: Installer creation resources
  - **scout_installer.nsi**: NSIS installer script
  - **create_installer_images.py**: Creates installer graphics
  - **README.md**: Installer documentation
- **resources/**: Application resources
  - **icons/**: Application icons
  - **templates/**: Default templates
  - **logs/**: Log output directory

## Service Architecture

Scout implements a service-oriented architecture:

1. **ServiceLocator**: Central registry of services
   - Provides access to services via interface types
   - Manages service lifecycle
   - Prevents circular dependencies

2. **Service Interfaces**:
   - **WindowServiceInterface**: Window management operations
   - **DetectionServiceInterface**: Detection strategies and operations
   - **AutomationServiceInterface**: Task execution and scheduling
   - **GameServiceInterface**: Game state management

3. **Event Bus**:
   - Facilitates communication between components
   - Supports multiple subscribers for each event
   - Reduces direct coupling between components

4. **LanguageManager**:
   - Centralized language management
   - Dynamic language switching
   - Translation string handling via tr() function

## Core Features

### Window Management

- Detects game windows by title or process
- Captures window screenshots efficiently
- Supports coordinate translation between screen and client
- Publishes window state events (moved, resized, etc.)

### Detection System

- **Template Matching**: Finds patterns using OpenCV
- **OCR Detection**: Text recognition using Tesseract
- **YOLO Detection**: Deep learning-based detection (optional)
- Visualization options for detection results

### Automation System

- **Task Model**: Flexible task definition system
- **Task Types**:
  - Click actions
  - Key presses
  - Text input
  - Wait conditions
  - Conditional execution
  - Loops and sequences
- Priority-based execution queue
- Error handling and recovery

### Game State System

- Tracks game resources and entities
- Stores historical state information
- Triggers automation based on state changes
- Visualizes game state in various formats

## UI Components

### Main Window

Central container with tabbed interface, menus, toolbar, and status bar.

### Detection Tab

- Template management
- Detection configuration
- Results visualization
- History tracking with heatmap

### Automation Tab

- Sequence management
- Action editor
- Execution controls
- Position management

### Game State Tab

- Resource tracking
- Map visualization
- State variable editor
- History visualization

### Settings Tab

- UI preferences (language, theme)
- Path configuration
- Detection settings
- Automation preferences
- Update settings

## Internationalization

The application supports multiple languages:

- English (default)
- German

Key internationalization features:

- Runtime language switching
- Language-aware layouts (accommodates text expansion)
- Translation extraction and compilation tools
- System language detection

## Theme System

Supports multiple UI themes:

- Light theme
- Dark theme
- System theme (follows OS settings)

Theme features:

- Color palettes for each theme
- Runtime theme switching
- Persistent theme preferences

## Recent Important Fixes

1. **Fixed AutomationTab Issues**
   - Added missing `_connect_signals` method to wire up UI events
   - Added missing `_update_sequence_list` method to refresh the UI
   - Fixed `_on_sequence_changed` and `_load_sequence` methods for proper sequence handling

2. **Fixed AutomationActionEditor**
   - Added missing `set_position` method to handle positions from PositionList
   - Fixed `_on_action_type_changed` to properly update UI when action type changes
   - Ensured proper parameter updates when editing actions

3. **Fixed SettingsTab Initialization**
   - Updated to include required `ServiceLocator` parameter
   - Fixed settings loading and persistence

4. **Fixed MainWindow Signal Connections**
   - Added error handling for signal connections
   - Added checks for signal existence before connecting
   - Improved event handling between components

## Release Status

The application is now ready for release with all planned features implemented:

- ✅ Core services fully implemented and tested
- ✅ UI components complete with full functionality
- ✅ Internationalization with English and German support
- ✅ Theme system with Light/Dark/System themes
- ✅ Automated update system
- ✅ Comprehensive error handling and recovery
- ✅ Cross-platform compatibility (Windows, macOS, Linux)
- ✅ Documentation (user guides and developer documentation)
- ✅ Build system and installers for all platforms

### Release Artifacts

| File | Size | SHA-256 Checksum |
|------|------|-----------------|
| Scout_Setup_1.0.0.exe | 61.7 MB | 4ABD95D617FEDFA173990CDFF77101318AF781A4791E13E1A75530F0C0FD63D0 |
| Scout_1.0.0_Portable.zip | 89.0 MB | 93798EAF1D6079A85A17553D1A360FA32978EA843ECEA68395E4DFE17F4F5F34 |

### Current User Journey

1. **Installation**: User installs Scout using platform-specific installer
2. **Window Detection**: Application detects and selects the Total Battle game window
3. **Detection**: User creates templates and uses detection to find game elements
4. **Automation**: User creates automation sequences to perform game tasks
5. **Monitoring**: User monitors game state through the Game State tab
6. **Configuration**: User customizes app settings including language preferences

## Next Steps & Future Development

1. **Post-Release Monitoring**
   - Monitor user feedback and bug reports
   - Address any critical issues in maintenance releases

2. **Version 1.1 Development**
   - Additional detection strategies
   - Enhanced automation capabilities
   - More language options
   - Mobile companion app integration

3. **Documentation Expansion**
   - Create video tutorials
   - Expand API documentation
   - Improve developer onboarding

## Design Patterns Used

1. **Singleton Pattern** (scout/core/design/singleton.py)
   - Ensures single instance of services
   - Implemented as a metaclass for flexibility
   - Extended with SingletonProtocol for interface compatibility

2. **Service Locator Pattern** (scout/ui/service_locator_ui.py)
   - Provides centralized service access
   - Decouples service consumers from implementations
   - Facilitates testing with mock services

3. **Observer Pattern** (scout/core/events)
   - Implemented through the event system
   - Allows loose coupling between components
   - Provides typed events with payload data

4. **Strategy Pattern** (scout/core/detection)
   - Different detection strategies (Template, OCR, YOLO)
   - Pluggable design for easy extension
   - Common interface for all strategies

5. **Command Pattern** (scout/core/automation/task.py)
   - Encapsulates actions as Task objects
   - Supports composite tasks for complex operations
   - Provides consistent execution interface

## Code Quality Measures

1. **Type Hints**
   - Comprehensive type annotations throughout the codebase
   - MyPy static type checking in CI pipeline

2. **Linting**
   - Ruff for code style and quality checks
   - Pre-commit hooks for automated verification

3. **Documentation**
   - Comprehensive docstrings following Google style
   - Module, class, and function documentation
   - Examples for complex functionality

4. **Testing**
   - Unit tests for individual components
   - Integration tests for component interactions
   - Cross-platform tests for platform-specific behavior
   - Performance benchmarks for critical operations

### Current Status (Last Updated: Today)

We've identified a more reliable approach to window capture and detection using Qt's native QWindowCapture and QScreenCapture components. We'll be implementing a complete replacement of our current window service to solve the overlay visibility issues with the Total Battle game window.

## Qt Window Capture Implementation Plan

Based on the example code provided, we've developed a comprehensive plan to integrate Qt's native window/screen capture capabilities into our application architecture.

### Implementation Objectives:
1. Replace the current WindowService with a Qt-based implementation
2. Integrate window/screen selection into the detection tab UI
3. Support both real-time and on-demand capture
4. Maintain proper MVC architecture throughout
5. Ensure backward compatibility with existing code

### Architecture Overview

#### Core Components:
1. **QtWindowService** - Core service implementing WindowServiceInterface using Qt's capture APIs
2. **WindowListModel/ScreenListModel** - Data models for available windows/screens
3. **WindowSelectorWidget** - UI component for window/screen selection
4. **CaptureSession** - Manager for the capture process
5. **CaptureFrameProvider** - Interface to access captured frames for detection

#### Signal Flow:
- WindowService → emit window_changed → MainWindow
- CaptureSession → emit frame_captured → Detection/Automation services
- WindowSelector → emit selection_changed → WindowService

### Implementation Checklist

1. **Core Services (scout/core/window/)**
   - [x] Create `source_type.py` defining SourceType enumeration
   - [x] Create `capture_session.py` for QMediaCaptureSession management
   - [x] Create `image_utils.py` with QImage/numpy conversion utilities
   - [ ] Create `qt_window_service.py` implementing WindowServiceInterface
   - [ ] Implement window/screen enumeration and selection logic
   - [ ] Add compatibility layer for existing code that expects the old WindowService

2. **Models (scout/ui/models/)**
   - [x] Create `window_list_model.py` adapting WindowListModel to PyQt6
   - [x] Create `screen_list_model.py` adapting ScreenListModel to PyQt6
   - [x] Implement proper signal handling for window/screen changes

3. **UI Components (scout/ui/widgets/)**
   - [x] Create `window_selector_widget.py` with list views for windows/screens
   - [x] Create `capture_preview_widget.py` for displaying capture output
   - [ ] Implement UI controls for capture options

4. **Integration (scout/ui/)**
   - [ ] Modify `detection_tab.py` to include window selection components
   - [ ] Update `main_window.py` to use new QtWindowService
   - [ ] Modify `overlay_view.py` to work with the new capture system

5. **Tests**
   - [ ] Create unit tests for QtWindowService
   - [ ] Create integration tests for capture functionality
   - [ ] Test window selection and capture with various applications

6. **Permissions and Error Handling**
   - [ ] Add appropriate error handling for when capture requires admin rights
   - [ ] Add clear user prompts for required permissions
   - [ ] Implement graceful fallbacks when capture fails

7. **Documentation**
   - [ ] Update developer documentation with new architecture
   - [ ] Add user documentation for window selection
   - [ ] Document known limitations and requirements

### Implementation Progress

We have made significant progress on the core components and UI elements for the Qt-based window capture system:

1. **SourceType Enumeration** ✅
   - Created enumeration for different capture source types (Window or Screen)
   - Added comprehensive documentation

2. **CaptureSession Class** ✅
   - Implemented media capture session management
   - Added support for both window and screen capture sources
   - Implemented error handling and signal connections
   - Added methods for starting/stopping capture and taking screenshots

3. **Image Utilities** ✅
   - Created utility functions for converting between QImage and numpy arrays
   - Added image resizing utility to handle large captures
   - Ensured compatibility with OpenCV by properly handling color formats

4. **UI Data Models** ✅
   - Implemented `WindowListModel` for displaying available windows
   - Implemented `ScreenListModel` for displaying available screens
   - Added auto-updating for screen/window changes
   - Provided search capabilities for finding windows by title

5. **UI Widget Components** ✅
   - Implemented `WindowSelectorWidget` with the following features:
     - Tabbed interface for selecting windows or screens
     - Search functionality for finding windows by title
     - Automatic updating of screen list when screens are added/removed
     - Clear signaling of selection changes with appropriate data types
   - Implemented `CapturePreviewWidget` with the following features:
     - Real-time display of captured frames using QVideoWidget
     - Screenshot capability with file save dialog
     - Auto-screenshot mode for continuous frame processing
     - FPS counter and status information overlay
     - Frame conversion utilities for detection system integration

### Next Tasks

1. **Implement QtWindowService**
   - Primary implementation task to create the window service interface
   - Ensure backward compatibility with existing code
   - Integrate with CaptureSession for managing captures

2. **Integration with Detection Tab**
   - Integrate the UI components into the Detection Tab
   - Connect signals between components for seamless operation
   - Update the UI layout to accommodate the new components

### Technical Implementation Details

The implementation is based on PyQt6's Qt Multimedia module, specifically using:
- `QWindowCapture`: For capturing specific application windows
- `QScreenCapture`: For capturing entire screens
- `QMediaCaptureSession`: For managing the capture process
- `QVideoWidget`: For displaying the captured content

The UI components follow Qt's model-view-controller pattern:
- **Models**: `WindowListModel` and `ScreenListModel` provide data access
- **Views**: List views and QVideoWidget for display
- **Controllers**: Signal/slot connections handle user interactions

The CapturePreviewWidget supports both real-time view of the captured window/screen and on-demand screenshot functionality. It also provides an auto-screenshot mode that continuously emits frames for processing by the detection system, eliminating the need for the current overlay approach.

### Next Steps

1. Continue implementation by creating QtWindowService
2. Integrate the UI components into the Detection Tab
3. Connect signals between components for seamless operation
4. Test with Total Battle and other application windows